\ allfunctest.fiji \
\ Test the PigIron Project http://pigiron.sourceforge.net \

\ Declare values that will be used as parameters in making VSMAPI functions \
value authorizationlistadd.targetid
value authorizationlistadd.forid
value authorizationlistadd.functionid
value authorizationlistquery.targetid
value authorizationlistquery.forid
value authorizationlistquery.functionid
value directorymanagersearchdm.searchpattern
value imageactivate.targetid
value imagecreatedm.imagenametocreate
value imagecreatedm.prototypename
value imagecreatedm.intialpassword
value imagecreatedm.accountnumber
value imagecreatedm.noprototype.imagenametocreate
value imagecreatedm.noprototype.prototypename
value imagecreatedm.noprototype.intialpassword
value imagecreatedm.noprototype.accountnumber
value imagecreatedm.noprototype.alltheotherargs
value imagedeactivate.targetid
value imagedeactivate.forcetime
value imagedeletedm.imagetodelete
value imagelockdm.targettolock
value imagelockdm.devicetolock
value imagepasswordsetdm.newpassword
value prototypecreatedm.prototypetocreate
value prototypedeletedm.prototypetodelete
value prototypequerydm.prototypetoquery
value sharedmemoryaccessquerydm.memorysegmentname
value virtualnetworklanaccessquery.lanowner
value virtualnetworklanaccessquery.lanname
value virtualnetworklanquery.lanowner
value virtualnetworklanquery.lanname
value virtualnetworkvswitchquery.switchname

\ Control whether our sockets are SSL sockets \
value useSSL? true to useSSL?
\ true == ssl, false == regular socket   \
\ we actually override this in our local \
\ settings file before invoking any test \

\ Now load the defaults file containing assignments to the values \
allfunctest.defaults.fiji load

\ Now load FIJI support for PigIron \
pigiron_support.fiji load
access_support.fiji load

\ You will have to fill these in on your own  \
\ E.g., ' /home/me/my_defaults_file.fiji load \
value my.host
value my.port
value my.userid
value my.password
value my.target

\ utils \
: announce \ functorName -- \ " Testing" . . cr ;
: doandprint \ args functor -- \ doIt ( useSSL? (primitive) , ) prettyPrintAll ( ) . cr ;
: explain_skip \ StringValueName StringTestorName -- \ . " not run because " . . " was not set." . cr ;

\ ===== \
\ tests \
\ ===== \

: testing_CheckAuthentication \ -- \
  " CheckAuthentication" announce
   my.host my.port my.userid my.password my.target CheckAuthentication doandprint
;

: testing_QueryAPIFunctionalLevel \ -- \
   " QueryAPIFunctionalLevel" announce
    my.host my.port my.userid my.password my.target QueryAPIFunctionalLevel doandprint
;

: testing_ImageActivate \ -- \
   " ImageActivate" announce
   imageactivate.targetid null <>
   if my.host my.port my.userid my.password imageactivate.targetid ImageActivate doandprint
   else " imageactivate.targetid" " testing_ImageActivate" explain_skip
   then
;

: testing_ImageDeactivate \ -- \
   " ImageDeactivate" announce
   imageactivate.targetid null <>
   if my.host my.port my.userid my.password imageactivate.targetid imagedeactivate.forcetime ImageDeactivate doandprint
   else " imageactivate.targetid" " testing_ImageActivate" explain_skip
   then
;

: testing_ImageActiveConfigurationQuery  " ImageActiveConfigurationQuery" announce
my.host my.port my.userid my.password my.target ImageActiveConfigurationQuery doandprint ;

: testing_ImageCPUQuery " ImageCPUQuery" announce
 my.host my.port my.userid my.password my.target ImageCPUQuery doandprint ;

: testing_ImageQueryActivateTime_1 " ImageQueryActivateTime" announce
 my.host my.port my.userid my.password my.target ImageQueryActivateTime.DATE_FORMAT_INDICATOR_MMDDYY ImageQueryActivateTime doandprint ;
: testing_ImageQueryActivateTime_2  " ImageQueryActivateTime" announce
my.host my.port my.userid my.password my.target ImageQueryActivateTime.DATE_FORMAT_INDICATOR_MMDDYYYY ImageQueryActivateTime doandprint ;
: testing_ImageQueryActivateTime_3  " ImageQueryActivateTime" announce
my.host my.port my.userid my.password my.target ImageQueryActivateTime.DATE_FORMAT_INDICATOR_YYMMDD ImageQueryActivateTime doandprint ;
: testing_ImageQueryActivateTime_4 " ImageQueryActivateTime" announce
 my.host my.port my.userid my.password my.target ImageQueryActivateTime.DATE_FORMAT_INDICATOR_YYYYMMDD ImageQueryActivateTime doandprint ;
: testing_ImageQueryActivateTime_5 " ImageQueryActivateTime" announce
 my.host my.port my.userid my.password my.target ImageQueryActivateTime.DATE_FORMAT_INDICATOR_DDMMYY ImageQueryActivateTime doandprint ;
: testing_ImageQueryActivateTime_6 " ImageQueryActivateTime" announce
 my.host my.port my.userid my.password my.target ImageQueryActivateTime.DATE_FORMAT_INDICATOR_DDMMYYYY ImageQueryActivateTime doandprint ;

: testing_ImageQueryDM " ImageQueryDM" announce
 my.host my.port my.userid my.password my.target ImageQueryDM doandprint ;
: testing_ImageStatusQuery_1 " ImageStatusQuery" announce
 my.host my.port my.userid my.password my.target ImageStatusQuery doandprint ;
: testing_ImageStatusQuery_2 " ImageStatusQuery" announce
 my.host my.port my.userid my.password " *" ImageStatusQuery doandprint ;

: testing_ImageIPLQueryDM
    " ImageIPLQueryDM" announce  my.host my.port my.userid my.password my.target ImageIPLQueryDM doandprint ;
: testing_ImageNameQueryDM
    " ImageNameQueryDM" announce  my.host my.port my.userid my.password my.target ImageNameQueryDM doandprint ;
: testing_NameListQuery
    " NameListQuery" announce  my.host my.port my.userid my.password
    " *" NameListQuery doandprint ;
: testing_ProfileQueryDM
    " ProfileQueryDM" announce  my.host my.port my.userid my.password my.target ProfileQueryDM doandprint ;

: add_prototype_record \ PrototypeRecordStructure String -- \
    VSMString class new rot ( swap , )
    dup paramLength ( )
    VSMInt4 class new rot ( swap (primitive) , )
    2 pick add rot ( swap java.lang.Object () , ) drop
    add ( rot java.lang.Object () , ) drop
    ;
    
: testing_QueryDirectoryManagerLevelDM
    " QueryDirectoryManagerLevelDM" announce  my.host my.port my.userid my.password my.target QueryDirectoryManagerLevelDM doandprint ;
: testing_SharedMemoryQuery_1
    " SharedMemoryQuery" announce  my.host my.port my.userid my.password my.target " *" SharedMemoryQuery doandprint ;
: testing_SharedMemoryQuery_2
    " SharedMemoryQuery" announce  my.host my.port my.userid my.password my.target " CMSPIPES" SharedMemoryQuery doandprint ;
: testing_VMRMMeasurementQuery
    " VMRMMeasurementQuery" announce  my.host my.port my.userid my.password my.target VMRMMeasurementQuery doandprint ;
: testing_VirtualNetworkAdapterQuery
    " VirtualNetworkAdapterQuery" announce my.host my.port my.userid my.password my.target " *" VirtualNetworkAdapterQuery doandprint ;

: testing_DirectoryManagerSearchDM " DirectoryManagerSearchDM" announce
     directorymanagersearchdm.searchpattern null <> 
     if  my.host my.port my.userid my.password my.target directorymanagersearchdm.searchpattern DirectoryManagerSearchDM doandprint
     else " directorymanagersearchdm.searchpattern"  " testing_DirectoryManagerSearchDM" explain_skip
     then ;
        
: testing_SharedMemoryAccessQueryDM " SharedMemoryAccessQueryDM" announce
    sharedmemoryaccessquerydm.memorysegmentname null <>
    if my.host my.port my.userid my.password my.target sharedmemoryaccessquerydm.memorysegmentname SharedMemoryAccessQueryDM doandprint
    else " sharedmemoryaccessquerydm.memorysegmentname" " testing_SharedMemoryAccessQueryDM"  explain_skip
    then ;

: testing_VirtualNetworkLANAccessQuery " VirtualNetworkLANAccessQuery" announce
    virtualnetworklanaccessquery.lanname null <>
        if virtualnetworklanaccessquery.lanowner null <>
            if my.host my.port my.userid my.password my.target virtualnetworklanaccessquery.lanname virtualnetworklanaccessquery.lanowner
            VirtualNetworkLANAccessQuery doandprint
        else " virtualnetworklanaccessquery.lanowner" " testing_VirtualNetworkLANAccessQuery" explain_skip
        then
    else " virtualnetworklanaccessquery.lanname"  " testing_VirtualNetworkLANAccessQuery" explain_skip
    then ;

: testing_VirtualNetworkLANQuery " VirtualNetworkLANQuery" announce
    virtualnetworklanaccessquery.lanname null <>
        if virtualnetworklanaccessquery.lanowner null <>
            if my.host my.port my.userid my.password my.target virtualnetworklanquery.lanname virtualnetworklanquery.lanowner
            VirtualNetworkLANQuery doandprint
        else " virtualnetworklanquery.lanowner" " testing_VirtualNetworkLANQuery" explain_skip
        then
    else " virtualnetworklanquery.lanname" " testing_VirtualNetworkLANQuery"  explain_skip
    then ;

: testing_VirtualNetworkVswitchQuery " VirtualNetworkVswitchQuery" announce
    virtualnetworkvswitchquery.switchname null <>
    if my.host my.port my.userid my.password my.target virtualnetworkvswitchquery.switchname VirtualNetworkVswitchQuery doandprint
    else " virtualnetworkvswitchquery.switchname" " testing_VirtualNetworkVswitchQuery" explain_skip
    then ;

\ 3 x 3 yields nine different cases for * ... we should also test specific entry_names \
: testing_ImageVolumeSpaceQueryDM_1 " ImageVolumeSpaceQueryDM_1" announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_DEFINITION ImageVolumeSpaceQueryDM.ENTRY_TYPE_VOLUME " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_2 " ImageVolumeSpaceQueryDM_2" announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_DEFINITION ImageVolumeSpaceQueryDM.ENTRY_TYPE_REGION " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_3 " ImageVolumeSpaceQueryDM_3" announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_DEFINITION ImageVolumeSpaceQueryDM.ENTRY_TYPE_GROUP " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_4 " ImageVolumeSpaceQueryDM_4" announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_FREE ImageVolumeSpaceQueryDM.ENTRY_TYPE_VOLUME " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_5 " ImageVolumeSpaceQueryDM_5" announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_FREE ImageVolumeSpaceQueryDM.ENTRY_TYPE_REGION " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_6 " ImageVolumeSpaceQueryDM_6" announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_FREE ImageVolumeSpaceQueryDM.ENTRY_TYPE_GROUP " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_7 " ImageVolumeSpaceQueryDM_7"  announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_USED ImageVolumeSpaceQueryDM.ENTRY_TYPE_VOLUME " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_8 " ImageVolumeSpaceQueryDM_8"  announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_USED ImageVolumeSpaceQueryDM.ENTRY_TYPE_REGION " *"
    ImageVolumeSpaceQueryDM doandprint ;
: testing_ImageVolumeSpaceQueryDM_9 " ImageVolumeSpaceQueryDM_9"  announce
    my.host my.port my.userid my.password my.target ImageVolumeSpaceQueryDM.QUERY_TYPE_USED ImageVolumeSpaceQueryDM.ENTRY_TYPE_GROUP " *"
    ImageVolumeSpaceQueryDM doandprint ;

: testing_PrototypeCreateDM " PrototypeCreateDM" announce
    my.host my.port my.userid my.password prototypecreatedm.prototypetocreate
    new_PrototypeRecordStructure dup clear ( ) drop \ void funcs in Java return null in Fiji! \
    dup " USER CCCC FARQUHAR 32M 512M G" add_prototype_record
    dup " ACCOUNT W00F" add_prototype_record
    dup " IPL CMS MACHINE ESA CONSOLE 001F 3215" add_prototype_record
    new_PrototypeRecordArray dup rot add ( rot java.lang.Object () , ) drop
    dup paramLength ( ) longValue ( ) swap
    PrototypeCreateDM doandprint ;

: testing_PrototypeNameQueryDM
    " PrototypeNameQueryDM" announce  my.host my.port my.userid my.password my.target PrototypeNameQueryDM doandprint ;

\ What we really should do here is save the results from a query and iterate over them. \
\ But here we will test the popular prototypes by hand \
: testing_PrototypeQueryDM_1 " PrototypeQueryDM_1" announce
    my.host my.port my.userid my.password " CMS" PrototypeQueryDM doandprint ;
: testing_PrototypeQueryDM_2 " PrototypeQueryDM_2" announce
    my.host my.port my.userid my.password " LINUX" PrototypeQueryDM doandprint ;

\ query the proto we created \
: testing_PrototypeQueryDM_3 " PrototypeQueryDM_3" announce
    my.host my.port my.userid my.password prototypecreatedm.prototypetocreate PrototypeQueryDM doandprint ;

\ modify the proto we created \
: testing_PrototypeReplaceDM " PrototypeReplaceDM" announce
    my.host my.port my.userid my.password prototypecreatedm.prototypetocreate
    new_PrototypeRecordStructure dup clear ( ) drop \ void funcs in Java return null in Fiji! \
    dup " USER QQQQ CAFEBABE 32M 512M G" add_prototype_record
    dup " ACCOUNT ARF0" add_prototype_record
    dup " IPL CMS MACHINE ESA CONSOLE 001F 3219" add_prototype_record
    new_PrototypeRecordArray dup rot add ( rot java.lang.Object () , ) drop
    dup paramLength ( ) longValue ( ) swap
    PrototypeReplaceDM doandprint ;

\ delete some proto which is probably the one we created \
: testing_PrototypeDeleteDM " PrototypeDeleteDM" announce
    my.host my.port my.userid my.password prototypedeletedm.prototypetodelete PrototypeDeleteDM doandprint ;

\ Test ImageCreateDM with a prototype \
: testing_ImageCreateDM_1 " ImageCreateDM_1" announce
    my.host my.port my.userid my.password imagecreatedm.imagenametocreate
    imagecreatedm.prototypename imagecreatedm.intialpassword imagecreatedm.accountnumber
    new_ImageRecordArray dup paramLength ( ) longValue ( ) swap
    ImageCreateDM doandprint ;

: add_image_record \ ImageRecordStructure String -- \
    VSMString class new rot ( swap , )
    dup paramLength ( )
    VSMInt4 class new rot ( swap (primitive) , )
    2 pick add rot ( swap java.lang.Object () , ) drop
    add ( rot java.lang.Object () , ) drop
    ;
    
\ Test ImageCreateDM with no prototype and values supplied \
: testing_ImageCreateDM_2 " ImageCreateDM_2" announce
    my.host my.port my.userid my.password imagecreatedm.noprototype.imagenametocreate
    java.lang.String class new ( ) dup dup \ three empty args for no-prototype version of call \
    new_ImageRecordStructure dup clear ( ) drop \ void funcs in Java return null in Fiji! \
    dup " USER CCCC FARQUHAR 32M 512M G" add_image_record
    dup " ACCOUNT W00F" add_image_record
    dup " IPL CMS MACHINE ESA CONSOLE 001F 3215" add_image_record
    new_ImageRecordArray dup rot add ( rot java.lang.Object () , ) drop
    dup paramLength ( ) longValue ( ) swap
    \ imagecreatedm.noprototype.alltheotherargs \
    ImageCreateDM doandprint ;

\ Delete the IPL for the no-prototype image we created \
: testing_ImageIPLDeleteDM " ImageIPLDeleteDM" announce
    my.host my.port my.userid my.password imagecreatedm.noprototype.imagenametocreate ImageIPLDeleteDM doandprint ;

\ Set a new IPL for the no-prototype image we created \
: testing_ImageIPLSetDM " ImageIPLSetDM" announce
    my.host my.port my.userid my.password imagecreatedm.noprototype.imagenametocreate " ELEPHANT" " 123" " ON PARADE"  ImageIPLSetDM doandprint ;

: query_no_proto_ipl_statement \ -- \
    " ImageIPLQueryDM" announce  my.host my.port my.userid my.password imagecreatedm.noprototype.imagenametocreate ImageIPLQueryDM doandprint ;

\ Delete the prototype-created image \
: testing_ImageDeleteDM_1 " ImageDeleteDM_1" announce
    imagecreatedm.imagenametocreate null <> 
    if \ We should also test other DATA_SECURITY_ERASE flags \
        my.host my.port my.userid my.password imagecreatedm.imagenametocreate ImageDeleteDM.DATA_SECURITY_ERASE_UNSPECIFIED
        ImageDeleteDM doandprint
    else " imagecreatedm.imagenametocreate" " testing_ImageDeleteDM" explain_skip
    then ;

\ Delete the no-prototype created image \
: testing_ImageDeleteDM_2 " ImageDeleteDM_2" announce
    imagecreatedm.noprototype.imagenametocreate null <> 
    if \ We should also test other DATA_SECURITY_ERASE flags \
        my.host my.port my.userid my.password imagecreatedm.noprototype.imagenametocreate ImageDeleteDM.DATA_SECURITY_ERASE_UNSPECIFIED
        ImageDeleteDM doandprint
    else " imagecreatedm.noprototype.imagenametocreate" " ImageDeleteDM" explain_skip
    then ;

\ On our installation DIRMAINT does not have access to directory object so this is safe \
: testing_ImagePasswordSetDM " ImagePasswordSetDM" announce
    my.host my.port my.userid my.password my.target imagepasswordsetdm.newpassword ImagePasswordSetDM doandprint ;

\ Query all authorizations all virtual images all functions \
: testing_AuthorizationListQuery1 " AuthorizationListQuery" announce
    my.host my.port my.userid my.password
    authorizationlistquery.targetid authorizationlistquery.forid authorizationlistquery.functionid
    AuthorizationListQuery doandprint ;

\ Add authorization for a user for a given function with a comment added by "forid" to the auth record \
: testing_AuthorizationListAdd " AuthorizationListAdd" announce
    my.host my.port my.userid my.password authorizationlistadd.targetid authorizationlistadd.forid authorizationlistadd.functionid
    AuthorizationListAdd doandprint ;

\ Query authorizations which we just added \
: testing_AuthorizationListQuery2 " AuthorizationListQuery" announce
    my.host my.port my.userid my.password
    authorizationlistadd.targetid authorizationlistadd.forid authorizationlistadd.functionid
    AuthorizationListQuery doandprint ;

\ Remove the authorization which we just added \
: testing_AuthorizationListRemove " AuthorizationListRemove" announce
    my.host my.port my.userid my.password  authorizationlistadd.targetid authorizationlistadd.forid authorizationlistadd.functionid
    AuthorizationListRemove doandprint ;

\ We're going to lock an image or device and unlock it \
: testing_ImageLockDM " ImageLockDM" announce
    my.host my.port my.userid my.password imagelockdm.targettolock imagelockdm.devicetolock ImageLockDM doandprint ;

\ We unlock the same image we locked \
: testing_ImageUnlockDM " ImageUnlockDM" announce
    my.host my.port my.userid my.password imagelockdm.targettolock imagelockdm.devicetolock ImageUnlockDM doandprint ;

\ Test all notifications \
: testing_AsynchronousNotificationQueryDM " AsynchronousNotificationQueryDM" announce
    my.host my.port my.userid my.password " *"
    AsynchronousNotificationQueryDM.ENTITY_TYPE_DIRECTORY
    AsynchronousNotificationQueryDM.COMMUNICATION_TYPE_UNSPECIFIED \ AsynchronousNotificationQueryDM.COMMUNICATION_TYPE_TCP \
    0 java.lang.String class new ( )
    AsynchronousNotificationQueryDM.ENCODING_UNSPECIFIED
    " *"
    AsynchronousNotificationQueryDM doandprint ;

\ whole shebang as a sorta scripted dance \
: test-all \ -- \
    testing_CheckAuthentication
    testing_QueryAPIFunctionalLevel
    testing_ImageActivate
    testing_ImageDeactivate
    testing_ImageActiveConfigurationQuery
    testing_ImageCPUQuery
    testing_ImageQueryActivateTime_1
    testing_ImageQueryActivateTime_2
    testing_ImageQueryActivateTime_3
    testing_ImageQueryActivateTime_4
    testing_ImageQueryActivateTime_5
    testing_ImageQueryActivateTime_6
    testing_ImageQueryDM
    testing_ImageStatusQuery_1
    testing_ImageStatusQuery_2
    testing_ImageIPLQueryDM
    testing_ImageNameQueryDM
    testing_NameListQuery
    testing_ProfileQueryDM
    testing_QueryDirectoryManagerLevelDM
    testing_SharedMemoryQuery_1
    testing_SharedMemoryQuery_2
    testing_VMRMMeasurementQuery
    testing_VirtualNetworkAdapterQuery
    testing_DirectoryManagerSearchDM
    testing_SharedMemoryAccessQueryDM
    testing_VirtualNetworkLANAccessQuery
    testing_VirtualNetworkLANQuery
    testing_VirtualNetworkVswitchQuery
    testing_ImageVolumeSpaceQueryDM_1
    testing_ImageVolumeSpaceQueryDM_2
    testing_ImageVolumeSpaceQueryDM_3
    testing_ImageVolumeSpaceQueryDM_4
    testing_ImageVolumeSpaceQueryDM_5
    testing_ImageVolumeSpaceQueryDM_6
    testing_ImageVolumeSpaceQueryDM_7
    testing_ImageVolumeSpaceQueryDM_8
    testing_ImageVolumeSpaceQueryDM_9
    testing_PrototypeCreateDM
    testing_PrototypeNameQueryDM
    testing_PrototypeQueryDM_1
    testing_PrototypeQueryDM_2
    testing_PrototypeQueryDM_3
    testing_PrototypeReplaceDM    \ modify the proto we created \
    testing_PrototypeQueryDM_3    \ query again the proto we created and modified \
    testing_PrototypeDeleteDM
    testing_PrototypeNameQueryDM  \ make sure our proto went away \
    testing_ImageCreateDM_1
    testing_ImageLockDM     \ locks the image we just created \
    testing_ImageUnlockDM   \ unlocks the same image we just created and locked \ 
    testing_ImageCreateDM_2
    testing_ImageIPLDeleteDM \ Delete the no-proto account IPL statement \
    query_no_proto_ipl_statement \ See what happened \
    testing_ImageIPLSetDM \ Create for the no-proto account a new IPL statement \
    query_no_proto_ipl_statement \ See what happened \
    testing_ImageDeleteDM_1
    testing_ImageDeleteDM_2
    testing_ImagePasswordSetDM
    testing_AuthorizationListQuery1 \ just take a look \
    testing_AuthorizationListAdd    \ add an entry \
    testing_AuthorizationListQuery2 \ See if you can find that entry \
    testing_AuthorizationListRemove \ remove entry \
    testing_AuthorizationListQuery2 \ See if it is gone \
    testing_AsynchronousNotificationQueryDM \ Basically specify anything and everything \
    ;

\ ==== \
\ TODO \
\ ==== \

\ : testing_AsynchronousNotificationDisableDM " AsynchronousNotificationDisableDM" announce
    my.host my.port my.userid my.password my.target my.extraparm AsynchronousNotificationDisableDM doandprint ; \
\ : testing_AsynchronousNotificationEnableDM " AsynchronousNotificationEnableDM" announce
    my.host my.port my.userid my.password my.target my.extraparm AsynchronousNotificationEnableDM doandprint ; \

\ : testing_DirectoryManagerLocalTagDefineDM " DirectoryManagerLocalTagDefineDM" announce
    my.host my.port my.userid my.password my.target my.extraparm DirectoryManagerLocalTagDefineDM doandprint ; \
\ : testing_DirectoryManagerLocalTagDeleteDM " DirectoryManagerLocalTagDeleteDM" announce
    my.host my.port my.userid my.password my.target my.extraparm DirectoryManagerLocalTagDeleteDM doandprint ; \
\ : testing_DirectoryManagerLocalTagQueryDM " DirectoryManagerLocalTagQueryDM" announce
    my.host my.port my.userid my.password my.target my.extraparm DirectoryManagerLocalTagQueryDM doandprint ; \
\ : testing_DirectoryManagerLocalTagSetDM " DirectoryManagerLocalTagSetDM" announce
    my.host my.port my.userid my.password my.target my.extraparm DirectoryManagerLocalTagSetDM doandprint ; \

\ : testing_DirectoryManagerTaskCancelDM " DirectoryManagerTaskCancelDM" announce
    my.host my.port my.userid my.password my.target my.extraparm DirectoryManagerTaskCancelDM doandprint ; \

\ : testing_ImageCPUDefine " ImageCPUDefine" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageCPUDefine doandprint ; \
\ : testing_ImageCPUDefineDM " ImageCPUDefineDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageCPUDefineDM doandprint ; \
\ : testing_ImageCPUDelete " ImageCPUDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageCPUDelete doandprint ; \
\ : testing_ImageCPUDeleteDM " ImageCPUDeleteDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageCPUDeleteDM doandprint ; \
\ : testing_ImageCPUQueryDM " ImageCPUQueryDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageCPUQueryDM doandprint ; \
\ : testing_ImageCPUSetMaximumDM " ImageCPUSetMaximumDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageCPUSetMaximumDM doandprint ; \

\ : testing_ImageDeviceDedicate " ImageDeviceDedicate" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDeviceDedicate doandprint ; \
\ : testing_ImageDeviceDedicateDM " ImageDeviceDedicateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDeviceDedicateDM doandprint ; \
\ : testing_ImageDeviceReset " ImageDeviceReset" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDeviceReset doandprint ; \
\ : testing_ImageDeviceUndedicate " ImageDeviceUndedicate" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDeviceUndedicate doandprint ; \
\ : testing_ImageDeviceUndedicateDM " ImageDeviceUndedicateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDeviceUndedicateDM doandprint ; \

\ : testing_ImageDiskCopy " ImageDiskCopy" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskCopy doandprint ; \
\ : testing_ImageDiskCopyDM " ImageDiskCopyDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskCopyDM doandprint ; \
\ : testing_ImageDiskCreate " ImageDiskCreate" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskCreate doandprint ; \
\ : testing_ImageDiskCreateDM " ImageDiskCreateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskCreateDM doandprint ; \
\ : testing_ImageDiskDelete " ImageDiskDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskDelete doandprint ; \
\ : testing_ImageDiskDeleteDM " ImageDiskDeleteDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskDeleteDM doandprint ; \
\ : testing_ImageDiskShare " ImageDiskShare" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskShare doandprint ; \
\ : testing_ImageDiskShareDM " ImageDiskShareDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskShareDM doandprint ; \
\ : testing_ImageDiskUnshare " ImageDiskUnshare" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskUnshare doandprint ; \
\ : testing_ImageDiskUnshareDM " ImageDiskUnshareDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageDiskUnshareDM doandprint ; \

\ : testing_ImageRecycle " ImageRecycle" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageRecycle doandprint ; \
\ : testing_ImageReplaceDM " ImageReplaceDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageReplaceDM doandprint ; \
\ : testing_ImageSCSICharacteristicsDefineDM " ImageSCSICharacteristicsDefineDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageSCSICharacteristicsDefineDM doandprint ; \
\ : testing_ImageSCSICharacteristicsQueryDM " ImageSCSICharacteristicsQueryDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageSCSICharacteristicsQueryDM doandprint ; \

\ : testing_ImageVolumeAdd " ImageVolumeAdd" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageVolumeAdd doandprint ; \
\ : testing_ImageVolumeDelete " ImageVolumeDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageVolumeDelete doandprint ; \
\ : testing_ImageVolumeSpaceDefineDM " ImageVolumeSpaceDefineDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageVolumeSpaceDefineDM doandprint ; \

\ : testing_ImageVolumeSpaceRemoveDM " ImageVolumeSpaceRemoveDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ImageVolumeSpaceRemoveDM doandprint ; \
\ : testing_NameListAdd " NameListAdd" announce
    my.host my.port my.userid my.password my.target my.extraparm NameListAdd doandprint ; \
\ : testing_NameListDestroy " NameListDestroy" announce
    my.host my.port my.userid my.password my.target my.extraparm NameListDestroy doandprint ; \
\ : testing_NameListRemove " NameListRemove" announce
    my.host my.port my.userid my.password my.target my.extraparm NameListRemove doandprint ; \
\ : testing_ProfileCreateDM " ProfileCreateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ProfileCreateDM doandprint ; \
\ : testing_ProfileDeleteDM " ProfileDeleteDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ProfileDeleteDM doandprint ; \
\ : testing_ProfileLockDM " ProfileLockDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ProfileLockDM doandprint ; \
\ : testing_ProfileReplaceDM " ProfileReplaceDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ProfileReplaceDM doandprint ; \
\ : testing_ProfileUnlockDM " ProfileUnlockDM" announce
    my.host my.port my.userid my.password my.target my.extraparm ProfileUnlockDM doandprint ; \

\ : testing_QueryAsynchronousOperationDM " QueryAsynchronousOperationDM" announce
    my.host my.port my.userid my.password my.target my.extraparm QueryAsynchronousOperationDM doandprint ; \
\ : testing_SharedMemoryAccessAddDM " SharedMemoryAccessAddDM" announce
    my.host my.port my.userid my.password my.target my.extraparm SharedMemoryAccessAddDM doandprint ; \

\ : testing_SharedMemoryAccessRemoveDM " SharedMemoryAccessRemoveDM" announce
    my.host my.port my.userid my.password my.target my.extraparm SharedMemoryAccessRemoveDM doandprint ; \
\ : testing_SharedMemoryCreate " SharedMemoryCreate" announce
    my.host my.port my.userid my.password my.target my.extraparm SharedMemoryCreate doandprint ; \
\ : testing_SharedMemoryDelete " SharedMemoryDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm SharedMemoryDelete doandprint ; \
\ : testing_SharedMemoryReplace " SharedMemoryReplace" announce
    my.host my.port my.userid my.password my.target my.extraparm SharedMemoryReplace doandprint ; \

\ : testing_StaticImageChangesActivateDM " StaticImageChangesActivateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm StaticImageChangesActivateDM doandprint ; \
\ : testing_StaticImageChangesDeactivateDM " StaticImageChangesDeactivateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm StaticImageChangesDeactivateDM doandprint ; \
\ : testing_StaticImageChangesImmediateDM " StaticImageChangesImmediateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm StaticImageChangesImmediateDM doandprint ; \

\ : testing_VMRMConfigurationQuery " VMRMConfigurationQuery" announce
    my.host my.port my.userid my.password my.target my.extraparm VMRMConfigurationQuery doandprint ; \
\ : testing_VMRMConfigurationUpdate " VMRMConfigurationUpdate" announce
    my.host my.port my.userid my.password my.target my.extraparm VMRMConfigurationUpdate doandprint ; \

\ : testing_VirtualChannelConnectionCreate " VirtualChannelConnectionCreate" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualChannelConnectionCreate doandprint ; \
\ : testing_VirtualChannelConnectionCreateDM " VirtualChannelConnectionCreateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualChannelConnectionCreateDM doandprint ; \
\ : testing_VirtualChannelConnectionDelete " VirtualChannelConnectionDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualChannelConnectionDelete doandprint ; \
\ : testing_VirtualChannelConnectionDeleteDM " VirtualChannelConnectionDeleteDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualChannelConnectionDeleteDM doandprint ; \

\ : testing_VirtualNetworkAdapterConnectLAN " VirtualNetworkAdapterConnectLAN" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterConnectLAN doandprint ; \
\ : testing_VirtualNetworkAdapterConnectLANDM " VirtualNetworkAdapterConnectLANDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterConnectLANDM doandprint ; \
\ : testing_VirtualNetworkAdapterConnectVswitch " VirtualNetworkAdapterConnectVswitch" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterConnectVswitch doandprint ; \
\ : testing_VirtualNetworkAdapterConnectVswitchDM " VirtualNetworkAdapterConnectVswitchDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterConnectVswitchDM doandprint ; \
\ : testing_VirtualNetworkAdapterCreate " VirtualNetworkAdapterCreate" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterCreate doandprint ; \
\ : testing_VirtualNetworkAdapterCreateDM " VirtualNetworkAdapterCreateDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterCreateDM doandprint ; \
\ : testing_VirtualNetworkAdapterDelete " VirtualNetworkAdapterDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterDelete doandprint ; \
\ : testing_VirtualNetworkAdapterDeleteDM " VirtualNetworkAdapterDeleteDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterDeleteDM doandprint ; \
\ : testing_VirtualNetworkAdapterDisconnect " VirtualNetworkAdapterDisconnect" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterDisconnect doandprint ; \
\ : testing_VirtualNetworkAdapterDisconnectDM " VirtualNetworkAdapterDisconnectDM" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkAdapterDisconnectDM doandprint ; \

\ : testing_VirtualNetworkLANAccess " VirtualNetworkLANAccess" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkLANAccess doandprint ; \

\ : testing_VirtualNetworkLANDelete " VirtualNetworkLANDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkLANDelete doandprint ; \
\ : testing_VirtualNetworkVswitchCreate " VirtualNetworkVswitchCreate" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkVswitchCreate doandprint ; \
\ : testing_VirtualNetworkVswitchDelete " VirtualNetworkVswitchDelete" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkVswitchDelete doandprint ; \

\ : testing_VirtualNetworkVswitchSet " VirtualNetworkVswitchSet" announce
    my.host my.port my.userid my.password my.target my.extraparm VirtualNetworkVswitchSet doandprint ; \

\ End \
