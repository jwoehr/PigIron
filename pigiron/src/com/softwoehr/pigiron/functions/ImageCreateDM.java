/*
 * Copyright (c) 2008, 2015, Jack J. Woehr jwoehr@softwoehr.com
 * PO Box 51, Golden, Colorado 80402-0051 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *         notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *         notice, this list of conditions and the following disclaimer
 *         in the documentation and/or other materials provided with the
 *         distribution.
 *     * Neither the name of the PigIron Project nor the names of its
 *         contributors may be used to endorse or promote products derived
 *         from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Autogenerated Tue Dec 15 19:22:11 UTC 2015
 * by pigfunc.m4 Copyright *C* 2015 Jack J. Woehr
 * Part of the PigIron Project http://pigiron.sourceforge.net
 */
package com.softwoehr.pigiron.functions;

import com.softwoehr.pigiron.access.*;
import com.softwoehr.pigiron.access.paramstructs.ImageRecordArray;

/**
 * {@code Image_Create_DM} VSMAPI Function
 * @see com.softwoehr.pigiron.access.paramstructs.ImageRecordArray
 */
public class ImageCreateDM extends VSMCall {

    /**
     * The transmitted name of the function.
     */
    public static final String FUNCTION_NAME = "Image_Create_DM";

    /**
     *  Create an instance of the function call with important fields not instanced.
     */
    public ImageCreateDM() {
    }

    /**
     * Create an instance with the variables filled in.
     * @param hostname  VSMAPI Host DNS name
     * @param port port VSMAPI Host is listening on
     * @param userid userid executing the function
     * @param password the password
     * @param target_identifier the target of the VSMAPI function
     * @param prototype_name instances {@code prototypeName}
     * @param initial_password instances {@code initialPassword}
     * @param initial_account_number instances {@code initialAccountNumber}
     * @param image_record_array_length instances {@code imageRecordArrayLength}
     * @param image_record_array instances {@code imageRecordArray}
     */
    public ImageCreateDM(String hostname, int port, String userid, String password , String target_identifier, String prototype_name, String initial_password, String initial_account_number, int image_record_array_length, ImageRecordArray image_record_array) {
        this();
        setHostname(hostname);
        setPort(port);
        setUserid(userid);
        setPassword(password);
        setTarget_identifier(target_identifier);
        set_prototypeName(prototype_name);
        set_initialPassword(initial_password);
        set_initialAccountNumber(initial_account_number);
        set_imageRecordArrayLength(image_record_array_length);
        set_imageRecordArray(image_record_array);
    }

    /** The prototype to use for creating the image. */
    private String prototypeName = "";

    /** The logon password to be assigned initially to the virtual image being created */
    private String initialPassword = "";

    /** The account number to be assigned initially to the virtual image being created */
    private String initialAccountNumber = "";

    /** Length of image_record_array */
    private int imageRecordArrayLength = 0;

    /** An array instanced in the ctor. */
    private ImageRecordArray imageRecordArray = null;

    /** Set the value of {@code  prototypeName }.
     * @param val The value to set {@code  prototypeName }.
     */
    public final void set_prototypeName(String val) {
        prototypeName = val;
    }

    /** Get the value of {@code  prototypeName }.
     * @return The value of {@code  prototypeName }.
     */
    public String get_prototypeName() {
        return prototypeName;
    }

    /** Set the value of {@code  initialPassword }.
     * @param val The value to set {@code  initialPassword }.
     */
    public final void set_initialPassword(String val) {
        initialPassword = val;
    }

    /** Get the value of {@code  initialPassword }.
     * @return The value of {@code  initialPassword }.
     */
    public String get_initialPassword() {
        return initialPassword;
    }

    /** Set the value of {@code  initialAccountNumber }.
     * @param val The value to set {@code  initialAccountNumber }.
     */
    public final void set_initialAccountNumber(String val) {
        initialAccountNumber = val;
    }

    /** Get the value of {@code  initialAccountNumber }.
     * @return The value of {@code  initialAccountNumber }.
     */
    public String get_initialAccountNumber() {
        return initialAccountNumber;
    }

    /** Set the value of {@code  imageRecordArrayLength }.
     * @param val The value to set {@code  imageRecordArrayLength }.
     */
    public final void set_imageRecordArrayLength(int val) {
        imageRecordArrayLength = val;
    }

    /** Get the value of {@code  imageRecordArrayLength }.
     * @return The value of {@code  imageRecordArrayLength }.
     */
    public int get_imageRecordArrayLength() {
        return imageRecordArrayLength;
    }

    /** Set the value of {@code  imageRecordArray }.
     * @param val The value to set {@code  imageRecordArray }.
     */
    public final void set_imageRecordArray(ImageRecordArray val) {
        imageRecordArray = val;
    }

    /** Get the value of {@code  imageRecordArray }.
     * @return The value of {@code  imageRecordArray }.
     */
    public ImageRecordArray get_imageRecordArray() {
        return imageRecordArray;
    }

    /**
     * Marshall parameters for the VSMAPI function call.
     * "Input" as in "input to VSMAPI".
     * @return the composed input ParameterArray
     * @see #composeOutputArray()
     * @see com.softwoehr.pigiron.access.ParameterArray
     */
    protected ParameterArray composeInputArray() {
        VSMString tempString;
        ParameterArray parameterArray = new ParameterArray(this);
        tempString = new VSMString(getFunctionName(), getFunctionName());
        parameterArray.add(new VSMInt4(tempString.paramLength(), "function_name_length"));
        parameterArray.add(tempString);
        tempString = new VSMString(getUserid(), "authenticated_userid");
        parameterArray.add(new VSMInt4(tempString.paramLength(), "authenticated_userid_length"));
        parameterArray.add(tempString);
        tempString = new VSMString(getPassword(), "password");
        parameterArray.add(new VSMInt4(tempString.paramLength(), "password_length"));
        parameterArray.add(tempString);
        parameterArray.add(new CountedString(getTarget_identifier(), "target_identifier"));        parameterArray.add(new CountedString(get_prototypeName(), "prototype_name"));        parameterArray.add(new CountedString(get_initialPassword(), "initial_password"));        parameterArray.add(new CountedString(get_initialAccountNumber(), "initial_account_number"));        parameterArray.add(new ImageRecordArray(get_imageRecordArray(), "image_record_array"));        VSMInt4 outputLength = new VSMInt4(new Long(parameterArray.totalParameterLength()).intValue(), "output_length");
        parameterArray.add(0,outputLength);
        setInParams(parameterArray);
        return parameterArray;
    }

    /**
     * Marshall parameters for the return of the VSMAPI function call.
     * "output" as in "output from VSMAPI"
     * @return the composed output ParameterArray
     * @see #composeInputArray()
     * @see com.softwoehr.pigiron.access.ParameterArray
     */
    protected ParameterArray composeOutputArray() {
        ParameterArray parameterArray = new ParameterArray(this);
        parameterArray.add(new VSMInt4(-1, "request_id_immediate"));
        parameterArray.add(new VSMInt4(-1, "output_length"));
        parameterArray.add(new VSMInt4(-1, "request_id"));
        parameterArray.add(new VSMInt4(-1, "return_code"));
        parameterArray.add(new VSMInt4(-1, "reason_code"));
        setOutParams(parameterArray);
        return parameterArray;
    }

    /**
     * Get the formal name of the VSMAPI function.
     * @return the formal name of the VSMAPI function.
     */
    @Override
    public String getFunctionName() {
        return FUNCTION_NAME;
    }

}
